<# 
.SYNOPSIS

Modify Sea-Bird CNV files to make them ODV-compatible.

DESCRIPTION

The CNV files generated by the Sea-Bird SBE application do not work when loaded into ODV.
In particular, the latitude and longitude are not formatted in a compatible manner.
Also, the 'bad_flag' variable is set to an unusual value with an extreme negative exponent
(to the -29th power) that also does not work well in ODV.

This script reformats the lat/long to work in ODV, and changes the "bad_flag" and any values
set to the bad_flag value, to -999, which is the value ODV expects.

.EXAMPLE

PS c:\> cnv_converter_for_ODV.ps1 <src_dir> <output_dir>

PS c:\> cnv_converter_for_ODV.ps1 c:\odv\cnv_files\source\ c:\odv\cnv_files\converted\

.INPUTS

.PARAMETER CNV_src_dir
    The directory containing the source CNV files.

.PARAMETER CNV_output_dir
    The directory to save the modified CNV files. Must be different than the source directory.

.OUTPUTS
    Return a code = 0 if program ran successfully. Any value other than 0 means an error occurred.

.NOTES
    Any errors that occur should display an associated message in the terminal window.

#>

<#
param (
    # Directory containing the source (unmodified) CNV files
    [string]$src_dir = $(throw "CNV source directory is required."),

    # Directory to save the converted CNV files (must be different than the source directory)
    [string]$output_dir = $(throw "CNV converted output directory is required.")
)
#>

class Converter {

    [decimal] $_latitude
    [decimal] $_longitude
    [string] $_input_directory = ""
    [string] $_output_directory = ""
    [string[]] $_cnv_files

    # Constructor:

    Converter([string]$input_dir, [string]$output_dir) {
        if (Test-Path $input_dir) {
            $this._input_directory = $input_dir
        } else {
            throw "Invalid input directory '$input_dir'."
        }

        if (Test-Path $output_dir) {
            $this._output_directory = $output_dir
        } else {
            throw "Invalid output directory '$output_dir'."
        }
    }

    [string] FormatLatitudeDegrees ([decimal] $latitude) {

        if ($latitude -ge 0) {
            $direction = "N"
        } else {
            $direction = "S"
        }

        $latitude = [System.Math]::Abs($latitude)

        return $latitude.ToString() + $direction
    }

    [string] FormatLongitudeDegrees ([decimal] $longitude) {

        if ($longitude -ge 0) {
            $direction = "E"
        } else {
            $direction = "W"
        }

        $longitude = [System.Math]::Abs($longitude)

        return $longitude.ToString() + $direction
    }


    [int] UpdateCNVFiles() {
        [int] $numFilesUpdated = 0

        # Get list of CNV files 
        $this.GetCNVFiles($this._input_directory)

        # Iterate the CNV files
        if ($this._cnv_files.Length -eq 0) {
            #throw new FileNotFoundException($"No CNV files found in directory '{_input_directory}'.");
            Write-Host "ERROR: No CNV files found in directory '$($this._input_directory)'."
            return -3
        }

        foreach ($cnv_file in $this._cnv_files)
        {
            if ($this._output_directory -notmatch '\\$') {
                $this._output_directory += '\'
            } 
            $output_file = $this._output_directory + [System.IO.Path]::GetFileName($cnv_file)
            Write-Host "output_file: '$($output_file)'"
            $numFilesUpdated += $this.UpdateCNV($cnv_file, $output_file)
        }

        return $numFilesUpdated;
    }

    [void] GetCNVFiles([string] $directory) {
        try {
            if (Test-Path $directory) {
                $this._cnv_files = Get-ChildItem -Path $directory -Filter *.CNV | % { $_.FullName }
            }

        } catch {
            Write-Error $_.Exception.Message
        }
    }

    <#
        For latitude and longitude:
        1. Find the line in the file (using the array syntax of Get-Content
        2. Append "_orig" to the word Latitude|Longitude to preserve it but have ODV ignore it.
        3. Add a new modified line with the reformatted lat/long that works in ODV.

        For the bad_flag variable, do a simple search/replace to use ODV-friendly -999 instead of SBE's value.
    #>
    [int] UpdateCNV ([string] $input_filename, [string] $output_filename) {
        
        [int] $retval = 0

#        Write-Host "In UpdateCNV..."
#        Write-Host "input: $input_filename"
#        Write-Host "output: $output_filename"

        try {
            # Get contents as array to easily find the desired line to search fo:
            $file_contents = Get-Content -Path $input_filename
            $lat = $file_contents | Select-String -Pattern '** Latitude' -SimpleMatch
            $long = $file_contents | Select-String -Pattern '** Longitude' -SimpleMatch

            if ($lat.ToString().Length -gt 0) {

                # We want to rename the initial value to "** Latitude_orig"
                # and add a new line with the edited version.
                $parts = $lat.ToString().Split(':')
                $new_label = $parts[0].Replace("Latitude", "Latitude_orig")
                $new_lat = $this.FormatLatitudeDegrees([System.Convert]::ToDecimal($parts[1]))
                $new_line = $new_label + ":" + $parts[1] + "`n" + $parts[0] + ":" + $new_lat

                # Dump again this time as a string using -Raw
                $file_contents = Get-Content -Path $input_filename -Raw
                $output_file = $file_contents.ToString().Replace($lat, $new_line)

                # Write to file like so:
                $output_file | Set-Content -Path $output_filename
            } else {
                throw "ERROR: Failed to find the latitude value."
            }


            if ($long.ToString().Length -gt 0) {

                # We want to rename the initial value to "** Longitude_orig"
                # and add a new line with the edited version.
                $parts = $long.ToString().Split(':')
                $new_label = $parts[0].Replace("Longitude", "Longitude_orig")
                $new_long = $this.FormatLongitudeDegrees([System.Convert]::ToDecimal($parts[1]))
                $new_line = $new_label + ":" + $parts[1] + "`n" + $parts[0] + ":" + $new_long

                # Dump again this time as a string using -Raw against the new OUTPUT file:
                $file_contents = Get-Content -Path $output_filename -Raw
                $output_file = $file_contents.ToString().Replace($long, $new_line)

                # Write to the new file
                $output_file | Set-Content -Path $output_filename
            } else {
                throw "ERROR: Failed to find the longitude value."
            }

            # There may be numerous instances of bad_flag replacements.
            # This replaces Sea-Bird's default "bad_flag" with an ODV-friendly value.
            # Note we are doing the replace on the new OUTPUT file.
            $output_file = (Get-Content -Path $output_filename -Raw) -replace '-9.990e-29', '-999'
            $output_file | Set-Content -Path $output_filename

        } catch {
            Write-Host "ERROR:`n"
            Write-Host $Error[0].Exception.ErrorRecord
            Write-Error $_.Exception.Message
            #Write-Host $Error[0].Exception.
            #Write-Host $Error[0].Exception.StackTrace
            $retval = -1
        }

        return $retval
    }
}

if ($args.Count -ne 2) {
    Write-Host "ERROR! Must pass the CNV source and output directories to the script."
    $result = -2
} else {
#try {
    #Write-Host "args:"
    Write-Host "Source directory: $($args[0])"
    Write-Host "Output directory: $($args[1])`n"

    $converter = [Converter]::new($args[0], $args[1])
    $result = $converter.UpdateCNVFiles()
#} catch {
#    Write-Host $_.Exception.Message
}

Write-Host "`nProgram completed with code $result (0 indicates success)."

